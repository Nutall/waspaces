#+TITLE: Notebook1
#+AUTHOR: jun.yi
#+DATE: 2018-10-09

* Dualcam Project
** Doro
   1. *Make complie failed, the error output is "GC overhead limit exceeded"*

      R: Insufficient memory

      S:
      #+BEGIN_SRC sh
        $cd project_root
        $export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4g"
        $./prebuilts/sdk/tools/jack-admin kill-server
        $./prebuilts/sdk/tools/jack-admin start-server
      #+END_SRC

   2. *Camera test run CTS*
      #+BEGIN_SRC sh
        $run cts -m CtsMediaTestCases --test android.media.cts.MediaRecorderTest#testRecorderPauseResume
      #+END_SRC

   3. *Close shading module by adb*
      #+BEGIN_SRC sh
        $ adb shell setprop debug.lsc_mgr.enable 0
      #+END_SRC

** Vsun\under{}V5507B
   1. *Change framerate*

      vendor/mediatek/proprietary/hardware/mtkcam/legacy/platform/mt6735/v1/common/paramsmgr/params/ParamsManagerImp.cpp
      #+BEGIN_SRC C++
        mParameters.set(MtkCameraParameters::KEY_PIP_MAX_FRAME_RATE_ZSD_ON, "22");
      #+END_SRC

   2. *Key for framerate log*

      #+BEGIN_SRC sh
        $adb logcat -s iio/ifunc | grep -i "dequeueHwBuf"
        $adb logacat | grep -i "handleReturnBuffers"
      #+END_SRC

   3. *Engineer mode Number*

      =*#527364#*=

   4. *OV2685 hw sync issue*

      1)手动模式帧率计算公式: FPS=SCLK/HTS/VTS

      HTS=R[380C,380D];

      VTS=R[380E,380F];

      R[3a0e,3a0f]= int(VTS/R[3a06,3a07])* R[3a06,3a07]

      R[3a10,3a11]= int(VTS/R[3a08,3a09])* R[3a08,3a09]

      Pclk 66000000hz

      OV2685_MIPI_FULL_PERIOD_PIXEL_NUMS:R[0x380c,0x380d]  0x6a4=1700

      OV2685_MIPI_FULL_PERIOD_LINE_NUMS :R[0x380e,0x380f]  0x50e=1294

      2)建议调试寄存器如下：

      Shading：   0x5800-0x581b

      AWB:        0x5180-0x519b

      CCM:        0x5380-0x538c

      Gamma:      0x5400-0x5411

      Sharpness:  0x5308-0x5313

      Raw de-noise:0x5280-0x5287

      Y de-noise:  0x5300-0x5307

      RGB De-noise:0x5480-0x5489

      0x3824/0x3825设置成1/4*HTS~1/2*HTS（0x380c,0x380d） （425~850）；0x3826/0x3827设置成VTS -4~VTS-128
** Whale
   :LOGBOOK:
   CLOCK: [2018-10-12 Fri 10:20]--[2018-10-12 Fri 10:45] =>  0:25
   :END:
   1. *Display dualcam icon in Snapcamera*

      #+BEGIN_SRC sh
        $adb shell setprop persist.vendor.snapcam.bokeh 1
      #+END_SRC

   2. *Dump otp data*

      #+BEGIN_SRC sh
        $ adb shell setprop persist.vendor.camera.cal.dump 1
        $ adb shell setprop persist.vendor.camera.sensor.debug 5
      #+END_SRC

   3. *Close selinux*

      #+BEGIN_SRC sh
        $adb shell setenforce 0
      #+END_SRC

   4. *UDCF LITE AE SYNC ISSUE*

      * 驱动需要配置OTP AEC数据的接口，以便AE sync算法使用。
      * k值的获取要不是从效果文件中获取，要不就是取自OTP。
      * 目前算法只针对不同色温下的K值有做调整，没有针对不同的亮度环境做调整。

   5. *repo sync*
      #+BEGIN_SRC sh
        $repo sync -c -q -f --force-sync -j4
      #+END_SRC

   6. *Qcom AF sync debug*

      * persist. +vendor.+ camera.dual.SlaveLensTH   ::LensThreshold 设相应的值
      * persist. +vendor.+ camera.dual.frames2wait   ::framesToWaitProp 设相应的值
      * persist. +vendor.+ camera.dual.mfollow       ::1使能是否enable这个和main的比较,0 disable这个功能

   7. *Display RGB and MONO at the same time*

      #+BEGIN_SRC sh
        $adb shell setprop persist.westalgo.dual.camera.display.mode 1
      #+END_SRC

   8. *OTP dump permission issue*

      #+BEGIN_SRC c
        static int xxx_xxx_eeprom_dump_dcdata(sensor_eeprom_data_t *e_ctrl)
        {

          int i = 0;
          int eeprom_fd = -1;
          int err = 0;
          mode_t m;
          SERR("xxx_xxx_eeprom_dump_dcdata Enter");

          if (access(PATH_DUALCAM, F_OK) != -1)
            {
              SERR("eeprom file is ready!");
            }
          else
            {
              sleep(5);
              m = umask(0);
              eeprom_fd = open(PATH_DUALCAM,  O_RDWR|O_CREAT, 0666);
              if (eeprom_fd < 0) {
                SERR("open epprom file error ret:%d", eeprom_fd);
                return 0;
              }

              err = write(eeprom_fd, e_ctrl->eeprom_params.buffer + CALI_DATA_OFFESET, CALI_DATA_NUM);
              if (err < 0) {
                SERR("write epprom data error");
              }
              SERR("eeprom write done %d",err);
              close(eeprom_fd);
              umask(m);
            }

          return 0;
        }
      #+END_SRC

   9. *Mono brighter than RGB when low light*

      #+BEGIN_SRC c
        static const int  low_luma_value = 15;
        static float exp_main_to_aux(float main_exp,exposureEntry *main)
        {
          float aux_exp;
          int main_avg_luma;
          aux_exp = main_exp * sensor_K;
          if(main->linecount > 8000 && main->sensor_gain > 31.0 && main->avg_luma <= low_luma_value){
            main_avg_luma = main->avg_luma == 0 ? 1 : main->avg_luma;
            aux_exp *= (float)low_luma_value / (float)main_avg_luma;
          }
          if(aux_exp > 9750*31.0)
            aux_exp = 9750*31.0;
          return aux_exp;
        }
      #+END_SRC

** Bong
   1. *Frame sync*

      验证frame id和timestamps是否同步在mm_channel_superbuf_comp_and_enqueue接口中添加如下
      #+BEGIN_SRC c
        uint64_t t_ms = (uint64_t)buf_info->buf->ts.tv_sec * 1000 + (uint64_t)buf_info->buf->ts.tv_nsec / 1000000;
        LOGI("stream_type:%d sessionid:%d  frame_idx:%d t_ms:%lld ms",buf_info->buf->stream_type,ch_obj->sessionid,buf_info->frame_idx,t_ms);
      #+END_SRC

   2. *Optical zoom with ratio*

      [[file:./img/notebook1_1.png]]

   3. *Disable awb sync*

      #+BEGIN_SRC sh
        $adb shell setprop persist.camera.awb.sync 2
        $adb shell setprop persist.vendor.camera.awb.sync 2
      #+END_SRC
** VM4
   1. *Open specify camera on MTK*

      #+BEGIN_SRC sh
        $adb shell setprop debug.camera.open 2
      #+END_SRC

   2. *Dump jpeg*

      #+BEGIN_SRC sh
        $adb shell setprop debug.camera.dump.JpegNode 1
      #+END_SRC

   3. *View camera info*

      #+BEGIN_SRC sh
        $adb shell cat /proc/driver/camera_info
      #+END_SRC

   4. *MTK adb logcat interrupt*

      #+BEGIN_SRC sh
        $adb logcat -G 10m
      #+END_SRC
** 1819
   1. *Review hw snyc from kernel log*

      #+BEGIN_SRC sh
        adb root
        adb shell
        echo "8" > /proc/sys/kernel/printk
        //echo 'file filename +p' > /sys/kernel/debug/dynamic_debug/control
        echo 'file msm_isp_axi_util.c +p' > /sys/kernel/debug/dynamic_debug/control
        exit
        adb shell cat /dev/kmsg | grep -i "msm_isp_increment_frame_id"
      #+END_SRC

   2. *Aux picture black issue*

      + Key:"=aec_process_calculate_current_luma: aec_Hybrid: hybrid luma="

        [[file:./img/notebook1_2.png]]
** DONE A3
   CLOSED: [2018-10-31 Wed 18:00] SCHEDULED: <2018-10-15 Mon 09:00>
** SAT
   1. *Dump dummySAT*

      #+BEGIN_SRC c
        void dumpYUVtoFile(algo_frame_t algo_frame,
                                      img_meta_t* img_meta,
                                      const char* name_prefix)
        {
          char filename[256];
          snprintf(filename, sizeof(filename), QCAMERA_DUMP_FRM_LOCATION"%s_%dx%d_%dx%d_z%.2f_uz%.2f_%d.yuv",
                   name_prefix, algo_frame.width, algo_frame.height,algo_frame.stride, algo_frame.scanline, img_meta->zoom_factor, img_meta->user_zoom_factor, algo_frame.frameid);

          int file_fd = open(filename, O_RDWR | O_CREAT, 0777);
          uint32_t buf_len = algo_frame.stride * algo_frame.scanline * 3/2;
          if (file_fd > 0) {
            fchmod(file_fd, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
            ssize_t writen_bytes = 0;
            writen_bytes = write(file_fd, (uint8_t *)algo_frame.vaddr, buf_len);
            close(file_fd);
            IDBG_INFO("dump output frame to file: %s, size:%d", filename, buf_len);
          }
        }
      #+END_SRC

* Platform
** Qcom
   1. *Fastboot usage*
      #+BEGIN_SRC sh
        $adb reboot bootloader
        $fastboot flash boot boot.img
        $fastboot flash system system.img
      #+END_SRC
   2. *Compile mm-camera*
      #+BEGIN_SRC sh
        $cd vendor/qcom/proprietary/mm-camera
        $mm -j6 2>&1 | tee bulid.log
      #+END_SRC
      编译完成之后push对应的.so文件到手机里，然后kill掉 mm-qcamera-daemon
   3. *Log with FPS*
      #+BEGIN_SRC sh
        adb root
        adb shell setprop persist.debug.sf.showfps 1
      #+END_SRC
      Key words: "=PROFILE_PREVIEW_FRAMES="
   4. *How to know sensor name*
      #+BEGIN_SRC sh
        $cat /sys/class/video4linux/v*/name
      #+END_SRC
   5. *Check user or userdebug*
      #+BEGIN_SRC sh
        $adb shell getprop ro.build.type
      #+END_SRC
   6. *Qcom calibration flag in sys*
      #+BEGIN_SRC sh
      adb shell "cat /sys/bus/platform/devices/1b0c000.qcom,cci:qcom,eeprom@0/calibration_flag"
      #+END_SRC
** TODO MTK
* Ubuntu
** Global Usage
   1. *Search anything*
      #+BEGIN_SRC sh
        $global -xg "anything"
      #+END_SRC
** Emacs
*** *Dired mode*
    1. *Enter dired mode*

       Key: SPC f j
    2. *Fresh current directory*

       Key: g

    3. *Mark command*

       - m: mark current icon directory

       - u: cancel mark current icon directory

       - U: cancel all mark

       - d: mark the file and directory that to be removed

       - t: mark the other file that not marked

    4. *File operation*

       - +: create a directory

       - C: copy file

       - R: rename file or move file

       - D: remove file

       - x: remove file that is marked

       - z: use gzip for the file

    5. *Change filename*

       - C-x C-q then C-c C-c

* Linux
