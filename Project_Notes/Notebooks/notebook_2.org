#+TITLE: Android Camera2 API
#+AUTHOR: jun.yi
#+DATE: 2019-01-02

* Important Class
** SurfaceView Class
*** SurfaceView API
*** SurfaceHolder API
*** SurfaceHolder.Callback
** android.hardware.camera2 class
*** CameraManager
   #+BEGIN_SRC java
     private void openCamera(int id) {
         if (mPaused) {
             return;
         }
         Log.d(TAG, "openCamera " + id);
         CameraManager manager;
         try {
             manager = (CameraManager) mActivity.getSystemService(Context.CAMERA_SERVICE);
             mCameraId[id] = manager.getCameraIdList()[id];
             if (!mCameraOpenCloseLock.tryAcquire(5000, TimeUnit.MILLISECONDS)) {
                 Log.d(TAG, "Time out waiting to lock camera opening.");
                 throw new RuntimeException("Time out waiting to lock camera opening");
             }
             manager.openCamera(mCameraId[id], mStateCallback, mCameraHandler);
         } catch (CameraAccessException e) {
             e.printStackTrace();
         } catch (InterruptedException e) {
             e.printStackTrace();
         }
     }

   #+END_SRC
*** CameraDevice
    * CameraDevice.StateCallback

      #+BEGIN_SRC java
        private final CameraDevice.StateCallback mStateCallback = new CameraDevice.StateCallback() {

                @Override
                public void onOpened(CameraDevice cameraDevice) {
                    int id = Integer.parseInt(cameraDevice.getId());
                    Log.d(TAG, "onOpened " + id);
                    mCameraOpenCloseLock.release();
                    if (mPaused) {
                        return;
                    }

                    mCameraDevice[id] = cameraDevice;
                    mCameraOpened[id] = true;

                    if (isBackCamera() && getCameraMode() == DUAL_MODE && id == BAYER_ID) {
                        Message msg = mCameraHandler.obtainMessage(OPEN_CAMERA, MONO_ID, 0);
                        mCameraHandler.sendMessage(msg);
                    } else {
                        mCamerasOpened = true;
                        mActivity.runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                mUI.onCameraOpened(mCameraIdList);
                            }
                        });
                        createSessions();
                    }
                }

                @Override
                public void onDisconnected(CameraDevice cameraDevice) {
                    int id = Integer.parseInt(cameraDevice.getId());
                    Log.d(TAG, "onDisconnected " + id);
                    cameraDevice.close();
                    mCameraDevice[id] = null;
                    mCameraOpenCloseLock.release();
                    mCamerasOpened = false;
                }

                @Override
                public void onError(CameraDevice cameraDevice, int error) {
                    int id = Integer.parseInt(cameraDevice.getId());
                    Log.e(TAG, "onError " + id + " " + error);
                    if (mCamerasOpened) {
                        mCameraDevice[id].close();
                        mCameraDevice[id] = null;
                    }
                    mCameraOpenCloseLock.release();
                    mCamerasOpened = false;

                    if (null != mActivity) {
                        Toast.makeText(mActivity,"open camera error id =" + id,
                                Toast.LENGTH_LONG).show();
                        mActivity.finish();
                    }
                }

                @Override
                public void onClosed(CameraDevice cameraDevice) {
                    int id = Integer.parseInt(cameraDevice.getId());
                    Log.d(TAG, "onClosed " + id);
                    mCameraDevice[id] = null;
                    mCameraOpenCloseLock.release();
                    mCamerasOpened = false;
                }

            };

      #+END_SRC
*** CameraCaptureSession
    * CameraCaptureSession.CaptureCallback
    * CameraCaptureSession.StateCallback
    #+BEGIN_SRC java
      try {
          CaptureRequest.Builder builder = getRequestBuilder(id);
          builder.setTag(id);
          addPreviewSurface(builder, null, id);

          applySettingsForLockFocus(builder, id);
          CaptureRequest request = builder.build();
          mLockRequestHashCode[id] = request.hashCode();
          mState[id] = STATE_WAITING_AF_LOCK;
          mCaptureSession[id].capture(request, mCaptureCallback, mCameraHandler);
          if(mHiston) {
              updateGraghViewVisibility(View.INVISIBLE);
          }
      } catch (CameraAccessException | IllegalStateException e) {
          e.printStackTrace();
      }
    #+END_SRC
*** CameraMetadata
**** CaptureRequest
**** CaptureRequest.Builder
**** CaptureResult
**** TotalCaptureResult
*** CameraCharacteristics
    #+BEGIN_SRC java
      private void setUpCameraOutputs(int imageFormat) {
          Log.d(TAG, "setUpCameraOutputs");
          CameraManager manager = (CameraManager) mActivity.getSystemService(Context.CAMERA_SERVICE);
          try {
              String[] cameraIdList = manager.getCameraIdList();
              for (int i = 0; i < cameraIdList.length; i++) {
                  String cameraId = cameraIdList[i];

                  CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);
    #+END_SRC
*** TextView
